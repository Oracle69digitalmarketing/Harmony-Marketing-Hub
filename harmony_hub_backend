# Directory Structure:
# harmony_hub_backend/
# ├── app/
# │   ├── main.py
# │   ├── models.py
# │   ├── database.py
# │   ├── schemas.py
# │   └── routers/
# │       ├── __init__.py
# │       └── campaigns.py
# └── Dockerfile

# File: app/main.py
from fastapi import FastAPI
from app.routers import campaigns
from app.database import engine
import app.models as models

models.Base.metadata.create_all(bind=engine)

app = FastAPI(title="Harmony Marketing Hub API")

app.include_router(campaigns.router, prefix="/campaigns", tags=["Campaigns"])

# File: app/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost/harmony_hub")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# File: app/models.py
from sqlalchemy import Column, Integer, String, Text
from app.database import Base

class Campaign(Base):
    __tablename__ = "campaigns"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), unique=True, index=True)
    description = Column(Text)
    status = Column(String(50))

# File: app/schemas.py
from pydantic import BaseModel

class CampaignBase(BaseModel):
    name: str
    description: str
    status: str

class CampaignCreate(CampaignBase):
    pass

class Campaign(CampaignBase):
    id: int

    class Config:
        orm_mode = True

# File: app/routers/campaigns.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app import schemas, models, database

router = APIRouter()

def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.post("/", response_model=schemas.Campaign)
def create_campaign(campaign: schemas.CampaignCreate, db: Session = Depends(get_db)):
    db_campaign = models.Campaign(**campaign.dict())
    db.add(db_campaign)
    db.commit()
    db.refresh(db_campaign)
    return db_campaign

@router.get("/", response_model=list[schemas.Campaign])
def list_campaigns(db: Session = Depends(get_db)):
    return db.query(models.Campaign).all()

# File: Dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY ./app /app/app
COPY requirements.txt /app

RUN pip install --no-cache-dir -r requirements.txt

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

# File: requirements.txt
fastapi
uvicorn
sqlalchemy
psycopg2-binary
pydantic
